<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C语言内存管理与变量生命周期、 作用域梳理]]></title>
    <url>%2F2018%2F11%2F10%2FC%E8%AF%AD%E8%A8%80%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%8F%98%E9%87%8F%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%A2%B3%E7%90%86%2F</url>
    <content type="text"><![CDATA[C语言的内存管理&#160; &#160; &#160; &#160;C源代码经过预处理、编译、汇编与链接成为一个可执行程序。&#160; &#160; &#160; &#160;C程序在运行之前，未加载到内存前，可执行程序内部已分为3部分信息，BSS区（未初始化数据区）、Data（全局初始化数据区）、Text(代码区)。&#160; &#160; &#160; &#160;运行可执行程序，程序被加载到内存中，除了根据已有信息分配这三个区外，还额外增加了两个区，栈区（stack）和堆（heap）区。具体关系如图所示。 &#160; &#160; &#160; &#160;&#160; &#160; &#160; &#160; &#160; 注： 所有未初始化的全局变量与静态变量，编译器会默认赋初值为0； 程序在加载到内存前，代码区和全局区（data与bss）的大小固定，且程序运行期间不能改变； data区与bss区中数据的生命周期为整个程序运行期间； data区、bss区与text区是由编译器在编译时分配的，堆和栈实在程序运行时分配的。 变量生命周期与作用域&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域分为全局作用域、局部作用域与文件作用域。 1） 普通全局变量&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域：全局作用域（只在一个源文件定义，多个源文件均可以使用，外部引用需用extern关键字声明）。&#160;&#160;&#160;&#160;&#160;&#160;&#160;生命周期：从编译到程序运行期间一直存在。&#160;&#160;&#160;&#160;&#160;&#160;&#160;内存分布：data区（初始化）与bss区（未初始化）。 2） 静态全局变量&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域：文件作用域（只能在定义的文件中使用，不允许外部调用）&#160;&#160;&#160;&#160;&#160;&#160;&#160;生命周期：从编译到程序运行期间一直存在。&#160;&#160;&#160;&#160;&#160;&#160;&#160;内存分布：data区（初始化）与bss区（未初始化）。 3） 普通局部变量&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域：局部作用域。&#160;&#160;&#160;&#160;&#160;&#160;&#160;生命周期：从定义到程序出局部作用域即被销毁（即属于某个{}，程序执行到{即分配内存，执行到}即销毁，下次进入再重新分配。）&#160;&#160;&#160;&#160;&#160;&#160;&#160;内存分布：栈区。 4） 静态局部变量&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域：局部作用域。&#160;&#160;&#160;&#160;&#160;&#160;&#160;生命周期：从编译到程序运行期间一直存在。&#160;&#160;&#160;&#160;&#160;&#160;&#160;内存分布：data区（初始化）与bss区（未初始化）。 5） 寄存器变量&#160;&#160;&#160;&#160;&#160;&#160;&#160;作用域：局部作用域&#160;&#160;&#160;&#160;&#160;&#160;&#160;生命周期：无&#160;&#160;&#160;&#160;&#160;&#160;&#160;内存分布：使用CPU的寄存器，无地址，不占用内存。 注： &#160;&#160;&#160;&#160;&#160;&#160;&#160;为了提高效率，C 语言允许将局部变量的值放在 CPU 中的寄存器中，这种变量叫“寄存器变量”，用关键字register作声明。&#160;&#160;&#160;&#160;&#160;&#160;&#160;只有局部自动变量和形式参数可以作为寄存器变量；&#160;&#160;&#160;&#160;&#160;&#160;&#160;一个计算机系统中的寄存器数目有限，不能定义任意多个寄存器变量；&#160;&#160;&#160;&#160;&#160;&#160;&#160;局部静态变量不能定义为寄存器变量。 关于static变量使用的一些tips: 若全局变量仅在单个C文件中访问，则可以将这个变量修改为静态全局变量，以降低模块间的耦合度； 若全局变量仅由单个函数访问，则可以将这个变量改为该函数的静态局部变量，以降低模块间的耦合度； 设计和使用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑重入问题，因为他们都放在静态数据存储区，全局可见; 如果我们需要一个可重入的函数，那么，我们一定要避免函数中使用static变量(这样的函数被称为：带“内部存储器”功能的的函数)； 函数中必须要使用static变量情况:比如当某函数的返回值为指针类型时，则必须是static的局部变量的地址作为返回值，若为auto类型，则返回为错指针。 总结&#160;&#160;&#160;&#160;&#160;&#160;&#160;全局变量和静态变量是在程序编译期就分配到data段或bss段中的，在整个程序的运行期，数据段和bss段中的内容是不会发生改变的。所以所有的全局变量和静态变量的生命周期必定是从程序编译到程序运行结束。而且如果全局变量和静态变量没有初始化，会统一默认初始化为0.&#160;&#160;&#160;&#160;&#160;&#160;&#160;而局部变量是在程序的运行时，在栈中分配的内存，所以生命周期一定是从程序运行的某一个时刻开始。]]></content>
      <categories>
        <category>编程基础</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
